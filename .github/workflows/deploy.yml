# .github/workflows/deploy.yml
name: Build and Deploy Chat App to GKE

on:
  push:
    # Keep trigger on main for now, can add feature branch later if desired
    branches: [ main ]
  # Allow manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'main' # Default to main, but can be changed when run manually

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Use ref from manual trigger if available, otherwise use push event ref
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          # Use commit SHA for unique tagging + latest
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/chat-app:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/chat-app:latest
          no-cache: true # Forces a build without using cache layers
          pull: true     # Always attempt to pull newer base images 
          build-args: |
            APP_VERSION=${{ github.ref_name }} 

  # --- NEW DEPLOY JOB FOR GKE ---
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push # Run after build job
    # Add permissions needed for auth action and gcloud
    permissions:
       contents: 'read'
       id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
      - name: Set short SHA output
        id: vars
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT    

      # Authenticate to Google Cloud using Workload Identity Federation (preferred) or SA Key
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
            credentials_json: '${{ secrets.GCP_SA_KEY }}' # USE THIS LINE

      # Set up gcloud CLI (needed for get-credentials)
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }} # Assuming you added GCP_PROJECT_ID secret

      # Get GKE cluster credentials
      - name: Get GKE credentials
        # Uses gcloud auth context set by the auth action
        # Assumes secrets.GCP_PROJECT_ID and secrets.GCP_ZONE are set
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GCP_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
      
      # Install gke-gcloud-auth-plugi
      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin --quiet
      
        # --- ADDED: Update image tag in deployment manifest ---
      - name: Update Kubernetes deployment image tag
          # Use sed to replace ':latest' with the specific FULL commit SHA tag
        run: |
            # Use the full SHA directly from the GitHub context
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/chat-app:${{ github.sha }}"
            echo "Updating deployment image to: ${IMAGE_NAME}"
            # Modify the k8s/web-deployment.yaml file in place
            sed -i "s|image: ${{ secrets.DOCKERHUB_USERNAME }}/chat-app:latest|image: ${IMAGE_NAME}|g" k8s/web-deployment.yaml
            echo "Manifest after update:"
            cat k8s/web-deployment.yaml # Optional: print modified file
      
        # Deploy application manifests
      - name: Deploy to GKE with kubectl
        run: kubectl apply -f k8s/